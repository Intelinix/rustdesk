name: Build RustDesk Headless CLI for Nano Win64

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: 🔍 Vérifier la présence de nano-cli/Cargo.toml
        shell: cmd
        run: |
          if not exist nano-cli\Cargo.toml (
            echo 🚨 ERREUR : nano-cli\Cargo.toml est introuvable.
            exit 1
          ) else (
            echo ✅ nano-cli\Cargo.toml trouvé.
          )

      - name: 🔍 Vérifier la présence de nano-cli/src/main.rs
        shell: cmd
        run: |
          if not exist nano-cli\src\main.rs (
            echo 🚨 ERREUR : nano-cli\src\main.rs est introuvable.
            exit 1
          ) else (
            echo ✅ nano-cli\src\main.rs trouvé.
          )

      - name: 📂 Lister le contenu de nano-cli
        run: dir nano-cli

      - name: 🦀 Install Rust toolchain (MSVC)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: x86_64-pc-windows-msvc

      - name: ⚙️ Configure sccache
        run: |
          rustup component add rust-src
          cargo install sccache
          echo "RUSTC_WRAPPER=sccache" >> $env:GITHUB_ENV

      - name: 📦 Download and extract libsodium (MSVC)
        run: |
          Invoke-WebRequest -Uri https://download.libsodium.org/libsodium/releases/libsodium-1.0.18-stable-msvc.zip -OutFile libsodium.zip
          Expand-Archive libsodium.zip -DestinationPath $env:USERPROFILE\libsodium

      - name: ⚙️ Set environment variables for libsodium
        shell: pwsh
        run: |
          echo "LIB=${env:USERPROFILE}\libsodium\libsodium-win64\Release\v142\static" >> $env:GITHUB_ENV
          echo "INCLUDE=${env:USERPROFILE}\libsodium\libsodium-win64\include" >> $env:GITHUB_ENV

      - name: 💾 Cache cargo + target + sccache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            ~/.cache/sccache
          key: rustdesk-msvc-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            rustdesk-msvc-${{ runner.os }}-

      - name: 📂 Copier nano-cli vers un dossier temporaire
        shell: pwsh
        run: |
          Copy-Item -Path "nano-cli" -Destination "temp-nano-cli" -Recurse -Force

      - name: 🔍 Vérifier la présence de Cargo.toml dans le dossier copié
        shell: cmd
        run: |
          if not exist temp-nano-cli\Cargo.toml (
            echo 🚨 ERREUR : temp-nano-cli\Cargo.toml est manquant.
            exit 1
          ) else (
            echo ✅ Cargo.toml copié avec succès.
          )

      - name: 🚫 Bypass opus build.rs check
        run: echo "VCPKG_ROOT=DUMMY" >> $env:GITHUB_ENV

      - name: 🛠️ Compiler RustDesk Headless CLI depuis dossier isolé
        working-directory: ./temp-nano-cli
        run: cargo build --release --target x86_64-pc-windows-msvc

      - name: 📤 Upload compiled binary
        uses: actions/upload-artifact@v4
        with:
          name: rustdesk-headless
          path: temp-nano-cli/target/x86_64-pc-windows-msvc/release/nano-cli.exe
